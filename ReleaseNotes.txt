Release Notes v1.9-1 (9/27/2014)
================================
* New automatic marker scaling feature for better support of iPhone 6 and iPhone 6 plus.
* New MEMapView delegate callbacks to notify applications of device scale changes.
* New test: Core/Scale Test that allows you to test different content scales.

Technical explanation:
http://wiki.ba3.us/index.php/September_26,_2014_-_iOS_Release_v1.9-1-g67bad06

API documentation:
http://dev1.ba3.us/ios/doc/Classes/MEMapViewController.html#//api/name/autoScaleMarkerImages

Relevant code samples:
AltusDemo/AltusDemo/Tests/Core/ScaleTest.m

Apple's recently introduced the iPhone 6 and iPhone 6 Plus. We have updated Altus to account for some changes introduced by these devices. At a high level:
* These are the first iOS devices where the physical resolution of render target the GPU is drawing to is by default different than the physical resolution of the screen.
* With these devices, Apple has introduced a Zoom mode that allows the change the scale and thus affect how things appear. The intent of Zoom mode is to make things appear a bit larger to the user.
* On iPhone 6 and iPhone 6 Plus, scaling is done for apps that don't have @3x resolution image assets.
* Even when an application does have appropriately scaled assets (@3x resolution images, etc.), by default, there is still a scaling (downscaling on iPhone 6 Plus, upscaling on iPhone 6) step to the physical screen because the screen's physical resolution is different the the GPU render target resolution.

The bottom line is that on iPhone 6 and iPhone 6 Plus scaling operations are occurring in some form, by default, in most cases. The type of and the amount of scaling can vary depending on a variety of factors.

== What Does This Mean For Your Application? ==

=== It May Not Be An Issue  ===
If you are using any version prior to Altus 1.9, and you are only targeting the iPad or up to iPhone 5s, then this will not affect you as long as:
* On non-Retina (@1x) devices you always supply marker images that are @1x resolution
* On Retina devices (@2x) you always supply marker images that are @2x resolution.

=== It May Be An Issue ===
If you are targeting iPhone 6 or iPhone 6 Plus and you have @2x marker assets you could see issues with marker image size and locations.

If you are using Altus prior to version 1.9 you may see these issues. There are 2 issues:

* Altus 1.8 and older, on iOS, assumes the render target will always be 1x or 2x. It also assumes marker images may be scaled based on the UIImage scale value. The marker anchoring and hit test logic won't work when the render target is between 2x and 3x.

* The iPhone 6 and 6 Plus use variable scale factors depending on a variety of factors. In other words scale can be anything.

== What You Can Do ==

In the ideal scenario, you upgrade to Altus 1.9 or later and make sure that your raster assets for markers have the same scale as the MEMapView content scale. In this way you will have the most ideal representation of your map assets.

If this is not practical for you, you can use the Altus 1.9 to automatically scale marker images to the right resolution for you.

=== Altus 1.9 Automatic Marker Scaling ===

This is new feature introduced in Altus 1.9 that is enabled by default. With this feature, Altus disregards the scale of UIImages used for markers and scales them up or down based on the content scale factor of the map view.

== In Summary ==
There are 3 possible "native" scales for just the iPhone 6 plus, if you include the simulator so marker assets must be scaled in some way to appear at the correct relative size.

The ideal scenario would be to provide assets at the exact same scale at the default MEMapView, so use @2x assets on when the scale factor is 2.0. But unless you are dynamically generating raster assets (with something like PaintCode) it may not be feasible to do this.

In that case, if the assets are higher (@3x) than the native scale, Altus 1.9 will scale them appropriately.

If the assets are lower (@1x or @2x) than the native scale, Altus 1.9 will scale them up. The upscale filtering may be noticeable, but there will be no extra performance hit for rendering them.


Release Notes v1.8-77
=============================
Support iOS 8 and iPhone 6 Plus. iOS 8 has new APIs for detecting native screen scale factors. Additionally, removed 'isRetina' function from several iOS APIs since the Altus core engine is resolution independent. If you use @3x images for marker images on iOS 8 devices (like the iPhone 6 Plus), you should update to this release. If you have recompiled your application with Xcode 6 and have or have started using @3x resolution images, you should update to this release to avoid errors in marker anchor point offsets and hit-detection points.

Release Notes v1.8-62
=============================
Memory optimizations. Decrease memory used by height profiling and terrain query system.

Release Notes v1.8-52
=============================
Support min / max level in pre-generated clustered marker maps. Support requires using AltusMarker server component.

Release Notes v1.8-40
=============================
Engine / SDK:
Address height profile queries above 85N and below 85S.

Release Notes v1.8-35
=============================
Engine / SDK:
Fixed vector styles disappearing when zoomed out in some polygon styles.

Release Notes v1.8-29
=============================
Engine / SDK:
Add API for changing style of polygon based on its string id.
http://dev1.ba3.us/ios/doc/Classes/MEMapViewController.html#//api/name/updatePolygonStyleInVectorMap:polygonId:style:animationDuration:


Release Notes v1.8-15
=============================
Engine / SDK:
Fix polygon tessellation issue.
Polygons that crossed the antemeridian added using addPolygonToVectorMap were sometimes not drawing the correct shape.


Release Notes v1.8-15
=============================
Engine / SDK:
New vector line API, new shader management system.
We've added a simple API for adding a line segment to a vector map such that it animates in sync with the rest of the engine. This allows you to 'tack on' segments of a line in scenarios where you might be displaying a route.

We also removed our legacy shader management system and replaced with a new one.

For developers with mission critical applications, please do thorough testing with this release to ensure all scenarios work correctly. If you see any issues, please report them.

NOTE: Altus 1.x will soon go into maintenance mode as we begin rolling out Altus 2.0.

Contact info@ba3.us for details.


Release Notes v1.7-18
=============================
Engine / SDK:
Patch for 64-bit Support.
This fixes a small type conversion problem related to 64-bit size_t usage.

Release Notes v1.7-0
=============================
Engine / SDK:
Added map priority system to enable finer-grained control over how map resources are scheduled.
Added in-engine polygon hit detection system for polygons on vector maps.
Made vertex buffer distances optional on MEVectorMapDelegate protocol.
Added optional string id for AddPolygon function. This gets returned in a polygon hit event.


AltusDemo Reference Application:
Added Stress test category and several stress tests to demonstrate how map priorities work in different scenarios.
Add Polygon test for demonstrating new Polygon hit-testing system.
Added alert message support to METest base class.
Added Test to show cumulative map loading times.
Add WMS TileWorker that demonstrates how to download raster tiles from WMS servers.
Make network caching optional in all example network tile workers.
Port all WMS tests from older reference application to AltusDemo.
Add fractal map layer to demonstrate a computationally expensive tile provider.

Release Notes v1.5-63
=============================
Added METimer utility class for doing benchmarking.
Added benchmarking support to test harness system in AltusDemo.
Fix memory resource leak in TileFactory sample tile provider. Was not calling TileLoadComplete on cancelled tiles.
Add some tests for dynamic vector lines to AltusDemo.
Add a very simple world-wide vector map produced by AltusVector.
Remove png files that aren't used in the AltusDemo project.
Fix story board file references in AltusDemo project.
Add level to METileProviderRequest object.
Add Objective-C path for reading from a raster package produced by AltusPackage.
Add immediate loading path for smart tile providers so they can bypass the loading queue in the iOS layer.
(For details, see: http://dev1.ba3.us/ios/doc/Classes/MEMapViewController.html#//api/name/tileLoadComplete:loadImmediate:)
Adding new indexed radar test.
Add test for tracking object inside animated vector circle.
Add animated vector circle test.


Major changes from 1.4 to 1.5
=============================
Update version number for release.
Call shutdown on dealloc in MEMapViewController.
Refactor package loading system for supporting other map types.
Support map bounds and max level in map packages.
Add the Charlotte sectional as a package, low resolution.
Add virtual marker sample.
Added GL context management to play more nicely with other GL views.
Adding virtual vector map test, shows how to draw a grid.
Create a sample that demonstrates fancy marker images.
Add basic route planning example.
Modify Terrain rendering system to optinally flip textures when it renders them so we don't have to jump through hoops when we are generating data in the GDAL pipeline.
New terrain lighting system.
Port height profiling tests to AltusDemo from Mapp.
Put old resource manager in as option.
Add mult-view support.
Add test for multi-view system.
Updating default terrain color.
Port air traffic dynamic markers test from Mapp.
Support UIImage in MarkerTileLoadComplete for virtual marker maps.
Fix color mosaic test for new projection.
Add route with markers demo.
Add new sample, TileFactory, that demonstrates better default pattern of doing a tile provider that does thread management outside the work of generating a tile.
Make raster package tile provider  handle missing tiles at higher levels.
Refactor and simplify iOS marker API:
    Consolidate all marker passing functions to use MEMarker.
    Remove MEMarkerAnnotation, replace with MEMarker.
    Remove MEDynamicMarker, replace with MEMarker.
    Remove MEFastMarker, replace with MEMarker.
    Remove MEMarkerInfo, replace with MEMarker.
    Remove deprecated add/remove/update marker APIs that have been
    superceded by the Dynamic marker APIs.
Add support for hit testing to virtual marker system.
Modify virtual marker map renderer to add marker to marker frame.
Add MEVirtualMarkerMapInfo object for describing virtual marker maps.
Add AddVirtualMarkerMapUsingMap info function to MEMapViewController.
Add support for drawing polygons to dynamic vector map layers.

New samples:
Artistic/Asteroids: Demonstrates dynamic vector layers
VectorMarkers/AnimatedVectorCircle: Demonstrates vector circles and range rings
Utilities/TileFactory: Demonstrates how to properly create an asynchronous tile provider. Used in all of the raster maps and weather maps.
UserInteracton/MultiView: Demonstrates how to use multiple instances of MEMapView and how to chain them together.
Utilities/MovingObject2D: Demonstrates how to move an object around the globe over time.
Markers/Clustered/BusStops: Demonstrates how to use in-memory clustered marker maps with different image loading strategies. If you were using the now-removed FastMarker API, these serve as a guide for using the new consolidated system.
